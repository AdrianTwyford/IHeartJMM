#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs')
  , stylus = require('../lib/stylus')
  , basename = require('path').basename
  , dirname = require('path').dirname
  , extname = require('path').extname
  , resolve = require('path').resolve
  , join = require('path').join
  , isWindows = process.platform === 'win32';

/**
 * Arguments.
 */

var args = process.argv.slice(2);

/**
 * Compare flag.
 */

var compare = false;

/**
 * Compress flag.
 */

var compress = false;

/**
 * CSS conversion flag.
 */

var convertCSS = false;

/**
 * Line numbers flag.
 */

var linenos = false;

/**
 * CSS class prefix.
 */
var prefix = '';

/**
 * Print to stdout flag.
 */
var print = false;

/**
 * Firebug flag
 */

var firebug = false;

/**
 * Sourcemap flag
 */

var sourcemap = false;

/**
 * Files to processes.
 */

var files = [];

/**
 * Import paths.
 */

var paths = [];

/**
 * Destination directory.
 */

var dest;

/**
 * Watcher hash.
 */

var watchers;

/**
 * Enable REPL.
 */

var interactive;

/**
 * Plugins.
 */

var plugins = [];

/**
 * Optional url() function.
 */

var urlFunction = false;

/**
 * Include CSS on import.
 */

var includeCSS = false;

/**
 * Set file imports.
 */

var imports = [];

/**
 * Resolve relative urls
 */

var resolveURL = false;

/**
 * Disable cache.
 */

var disableCache = false;

/**
 * Display dependencies flag.
 */

var deps = false;

/**
 * Hoist at-rules.
 */

var hoist = false;

/**
 * Usage docs.
 */

var usage = [
    ''
  , '  Usage: stylus [options] [command] [< in [> out]]'
  , '                [file|dir ...]'
  , ''
  , '  Commands:'
  , ''
  , '    help [<type>:]<prop> Opens help info at MDN for <prop> in'
  , '                         your default browser. Optionally'
  , '                         searches other resources of <type>:'
  , '                         safari opera w3c ms caniuse quirksmode'
  , ''
  , '  Options:'
  , ''
  , '    -i, --interactive       Start interactive REPL'
  , '    -u, --use <path>        Utilize the Stylus plugin at <path>'
  , '    -U, --inline            Utilize image inlining via data URI support'
  , '    -w, --watch             Watch file(s) for changes and re-compile'
  , '    -o, --out <dir>         Output to <dir> when passing files'
  , '    -C, --css <src> [dest]  Convert CSS input to Stylus'
  , '    -I, --include <path>    Add <path> to lookup paths'
  , '    -c, --compress          Compress CSS output'
  , '    -d, --compare           Display input along with output'
  , '    -f, --firebug           Emits debug infos in the generated CSS that'
  , '                            can be used by the FireStylus Firebug plugin'
  , '    -l, --line-numbers      Emits comments in the generated CSS'
  , '                            indicating the corresponding Stylus line'
  , '    -m, --sourcemap         Generates a sourcemap in sourcemaps v3 format'
  , '    --sourcemap-inline      Inlines sourcemap with full source text in base64 format'
  , '    --sourcemap-root <url>  "sourceRoot" property of the generated sourcemap'
  , '    --sourcemap-base <path> Base <path> from which sourcemap and all sources are relative'
  , '    -P, --prefix [prefix]   prefix all css classes'
  , '    -p, --print             Print out the compiled CSS'
  , '    --import <file>         Import stylus <file>'
  , '    --include-css           Include regular CSS on @import'
  , '    -D, --deps              Display dependencies of the compiled file'
  , '    --disable-cache         Disable caching'
  , '    --hoist-atrules         Move @import and @charset to the top'
  , '    -r, --resolve-url       Resolve relative urls inside imports'
  , '    -V, --version           Display the version of Stylus'
  , '    -h, --help              Display help information'
  , ''
].join('\n');

/**
 * Handle arguments.
 */

var arg;
while (args.length) {
  arg = args.shift();
  switch (arg) {
    case '-h':
    case '--help':
      console.error(usage);
      process.exit(0);
    case '-d':
    case '--compare':
      compare = true;
      break;
    case '-c':
    case '--compress':
      compress = true;
      break;
    case '-C':
    case '--css':
      convertCSS = true;
      break;
    case '-f':
    case '--firebug':
      firebug = true;
      break;
    case '-l':
    case '--line-numbers':
      linenos = true;
      break;
    case '-m':
    case '--sourcemap':
      sourcemap = {};
      break;
    case '--sourcemap-inline':
      sourcemap = sourcemap || {};
      sourcemap.inline = true;
      break;
    case '--sourcemap-root':
      var url = args.shift();
      if (!url) throw new Error('--sourcemap-root <url> required');
      sourcemap = sourcemap || {};
      sourcemap.sourceRoot = url;
      break;
    case '--sourcemap-base':
      var path = args.shift();
      if (!path) throw new Error('--sourcemap-base <path> required');
      sourcemap = sourcemap || {};
      sourcemap.basePath = path;
      break;
    case '-P':
    case '--prefix':
      prefix = args.shift();
      if (!prefix) throw new Error('--prefix <prefix> required');
      break;
    case '-p':
    case '--print':
      print = true;
      break;
    case '-V':
    case '--version':
      console.log(stylus.version);
      process.exit(0);
      break;
    case '-o':
    case '--out':
      dest = args.shift();
      if (!dest) throw new Error('--out <dir> required');
      break;
    case 'help':
      var name = args.shift()
        , browser = name.split(':');
      if (browser.length > 1) {
        name = [].slice.call(browser, 1).join(':');
        browser = browser[