var path = require('path');

var FileDescriptor = require('../../lib/descriptor');
var helper = require('../helper');

var assert = helper.assert;
var flags = helper.flags;


describe('FileDescriptor', function() {

  describe('constructor', function() {

    it('creates a new descriptor', function() {
      var fd = new FileDescriptor(flags('r'));
      assert.instanceOf(fd, FileDescriptor);
    });

  });

  describe('#getPosition()', function() {

    it('returns zero by default', function() {
      var fd = new FileDescriptor(flags('r'));
      assert.equal(fd.getPosition(), 0);
    });

  });

  describe('#setPosition()', function() {

    it('updates the position', function() {
      var fd = new FileDescriptor(flags('r'));
      fd.setPosition(10);
      assert.equal(fd.getPosition(), 10);
    });

  });

  describe('#isAppend()', function() {

    it('not opened for appending (r)', function() {
      var fd = new FileDescriptor(flags('r'));
      assert.isFalse(fd.isAppend());
    });

    it('not opened for appending (r+)', function() {
      var fd = new FileDescriptor(flags('r+'));
      assert.isFalse(fd.isAppend());
    });

    it('not opened for appending (rs)', function() {
      var fd = new FileDescriptor(flags('rs'));
      assert.isFalse(fd.isAppend());
    });

    it('not opened for appending (rs+)', function() {
      var fd = new FileDescriptor(flags('rs+'));
      assert.isFalse(fd.isAppend());
    });

    it('not opened for appending (w)', function() {
      var fd = new FileDescriptor(flags('w'));
      assert.isFalse(fd.isAppend());
    });

    it('not opened for appending (wx)', function() {
      var fd = new FileDescriptor(flags('wx'));
      assert.isFalse(fd.isAppend());
    });

    it('not opened for appending (w+)', function() {
      var fd = new FileDescriptor(flags('w+'));
      assert.isFalse(fd.isAppend());
    });

    it('not opened for appending (wx+)', function() {
      var fd = new FileDescriptor(flags('wx+'));
      assert.isFalse(fd.isAppend());
    });

    it('