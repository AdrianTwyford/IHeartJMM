{
  "name": "grunt-benchmark",
  "description": "Grunt task for benchmarking",
  "version": "0.2.0",
  "homepage": "https://github.com/shama/grunt-benchmark",
  "author": {
    "name": "Kyle Robinson Young",
    "email": "kyle@dontkry.com",
    "url": "http://dontkry.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/shama/grunt-benchmark.git"
  },
  "bugs": {
    "url": "https://github.com/shama/grunt-benchmark/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/shama/grunt-benchmark/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/grunt-benchmark.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt nodeunit"
  },
  "dependencies": {
    "benchmark": "~1.0.0"
  },
  "keywords": [
    "gruntplugin",
    "benchmark"
  ],
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt-contrib-watch": "~0.2.0",
    "ncp": "~0.2.6"
  },
  "readme": "# grunt-benchmark\n\nGrunt task for benchmarking with [Benchmark.js].\n\n## Getting Started\nInstall this grunt plugin next to your project's\n[Gruntfile][getting_started] with: `npm install grunt-benchmark`\n\nThen add this line to your project's Gruntfile:\n\n```javascript\ngrunt.loadNpmTasks('grunt-benchmark');\n```\n\n[grunt]: https://github.com/cowboy/grunt\n[getting_started]: https://github.com/cowboy/grunt/blob/master/docs/getting_started.md\n\n## Documentation\n\n### Basic Usage Example\nCreate a `benchmarks/` folder and create a benchmark script within that folder,\nie `fibonacci.js`:\n\n```javascript\nvar fibonacci = function(n) {\n  return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);\n};\n\nmodule.exports = function() {\n  fibbonacci(10);\n};\n```\n\nThe setup your Gruntfile config to run the benchmarks within the `benchmarks/` folder:\n\n```javascript\ngrunt.initConfig({\n  benchmark: {\n    all: {\n      src: ['benchmarks/*.js'],\n      dest: 'benchmarks/results.csv'\n    }\n  }\n});\n```\n\nThen run the task:\n\n```\n$ grunt benchmark\nRunning \"benchmark:all\" (benchmark) task\nBenchmarking \"0\" [benchmarks/test-timeout.js] x10...\n>> test-timeout x 418,070 ops/sec ±12.73% (46 runs sampled)\n```\n\nBenchmark name, date, times and per iteration will be logged in a csv format.\n\n### Test Options\n\nYou can add test options to pass to Benchmark.js by exporting an object of [test options].\n\n```javascript\nmodule.exports = {\n  name: 'Timeout (asynchronous)',\n  maxTime: 2,\n  defer: true,\n  onComplete: function() {\n    console.log('Hooray!');\n  },\n  fn: function(deferred) {\n    setTimeout(function() {\n      deferred.resolve();\n    }, 500);\n  }\n};\n```\n\n**Result:**\n\n```\n$ grunt benchmark\nRunning \"benchmark:singleTest\" (benchmark) task\nBenchmarking \"Timeout (asynchronous)\" [benchmarks/singleTest.js]...\nHooray!\n>> Timeout (asynchronous) x 2.00 ops/sec ±0.14% (8 runs sampled)\n```\n\n### Test Suite\n\nYou can pit implementations against one another by creating a test suite.\n\n```javascript\nvar fibonacci = function(n) {\n  return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);\n};\n\nvar fibonacci_memoized = (function (  ) {\n  var memo = [0, 1];\n  var fib = function (n) {\n    var result = memo[n];\n    if (typeof result !== 'number') {\n      result = fib(n - 1) + fib(n - 2);\n      memo[n] = result;\n    }\n    return result;\n  };\n  return fib;\n}());\n\n// A test suite\nmodule.exports = {\n  name: 'Fibonacci Showdown',\n  tests: {\n    'Fibonacci': function() {\n      fibonacci(10);\n      fibonacci(5);\n    },\n    'Fibonacci2': function() {\n      fibonacci_memoized(10);\n      fibonacci_memoized(5);\n    }\n  }\n};\n```\n\n**Result:**\n\n```\n$ grunt benchmark\nRunning \"benchmark:fibonacci\" (benchmark) task\nBenchmarking suite \"Fibonacci\" [benchmarks/fibonacci.js]...\n>> fibonacci x 13,386,628 ops/sec ±8.63% (74 runs sampled)\n>> fibonacci_memoized x 30,509,658 ops/sec ±2.10% (89 runs sampled)\nFastest is fibonacci_memoized\n```\n\n#### `exports.tests` as an Object:\n\nSet `exports.tests` to an Object that maps test names to functions and or [Benchmark.js test options].\n\n```javascript\nmodule.exports = {\n  name: 'Timeout Showdown',\n  tests: {\n    'Return immediately (synchronous)': function() {\n      return;\n    },\n    'Timeout: 50ms (asynchronous)': {\n      defer: true,\n      fn: function(deferred) {\n        setTimeout(deferred.resolve, 50);\n      }\n    },\n    'Timeout: 100ms (asynchronous)': {\n      defer: true,\n      fn: function(done) {\n        setTimeout(deferred.resolve, 100);\n      }\n    }\n  }\n};\n```\n\n#### `exports.tests` as an Array:\nSet `exports.tests` to an Array of functions and or [Benchmark.js test options].\n\n```javascript\nmodule.exports = {\n  name: 'Timeout Showdown',\n  tests: [\n    {\n      name: 'Return immediately (synchronous)',\n      fn: function() {\n        return;\n      }\n    },\n    {\n      name: 'Timeout: 50ms (asynchronous)',\n      defer: true,\n      fn: function(done) {\n        setTimeout(done, 50);\n      }\n    },\n    {\n      name: 'Timeout: 100ms (asynchronous)',\n      defer: true,\n      fn: function(done) {\n        setTimeout(done, 100);\n      }\n    }\n  ]\n};\n```\n\n\n### Benchmarking Tasks\nIncluded is a helper, `spawnTask`, for running Grunt tasks within your\nbenchmarks. This example will create a function to run the `watch` task:\n\n```javascript\n// benchmarks/watch.js\n// Create a spawnable watch task. Doesnt actually spawn until called.\nvar watchTask = require('grunt-benchmark').spawnTask('watch', {\n\n  // Text trigger to look for to know when to run the next step or exit\n  trigger: 'Waiting...',\n\n  // Base folder and Gruntfile\n  // You'll want to setup a fixture base folder and Gruntfile.js\n  // to ensure your Grunt'ing appropriately\n  base: 'path/to/a/gruntfile-base',\n  gruntfile: 'path/to/a/Gruntfile.js'\n\n  // Additional Grunt options can be specified here\n});\n\n// Our actual benchmark\nmodule.exports = function(done) {\n\n  // start the watch task\n  watchTask([function() {\n\n    // After trigger found, run this sync function\n    // this will trigger the watch task\n    grunt.file.write('path/to/file.js'), 'var test = false;');\n\n  }, function() {\n\n    // After the previous funciton has ran and another trigger hit...\n    // run this next sync function\n    grunt.file.delete('path/to/file.js');\n\n  }], function(result) {\n\n    // All done, do something more with the output result or finish up the benchmark\n    done();\n\n  });\n\n};\n```\n\n### Saving output\nTest results will be saved to a CSV file if a destination file is provided.\n\n```javascript\ngrunt.initConfig({\n  benchmark: {\n    singleTest: {\n      src: ['benchmarks/fibonacci.js'],\n      dest: 'results/fibonacci.csv'\n    },\n  }\n});\n```\n\n**Results in the following inside of `results/fibonacci.csv`:**\n\n| name               | date                                    | error | count   | cycles  | hz:                 |\n| ------------------ | --------------------------------------- | ----- | -------:| -------:| ------------------: |\n| fibonacci          | Tue Apr 23 2013 21:25:49 GMT-0700 (PDT) |       | 906237  |      4  | 15154635.038364386  |\n| fibonacci_memoized | Tue Apr 23 2013 21:25:54 GMT-0700 (PDT) |       | 1804104 |      4  | 31131880.83560733   |\n| fibonacci          | Tue Apr 23 2013 22:10:55 GMT-0700 (PDT) |       | 910791  |      4  | 13386627.749339204  |\n| fibonacci_memoized | Tue Apr 23 2013 22:11:01 GMT-0700 (PDT) |       | 1764921 |      4  | 30509657.596336514  |\n\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style.\nLint and test your code using [grunt][grunt].\n\n## Release History\n* 0.2.0 Switched to benchmark.js. Huge thanks to @lazd!\n* 0.1.3 Ability to log dest to a csv file. Support Grunt@0.4.0rc7.\n* 0.1.2 Update to work with Grunt@0.4.0rc3.\n* 0.1.1 Fix require path\n* 0.1.0 Initial release\n\n## License\nCopyright (c) 2013 Kyle Robinson Young\nLicensed under the MIT license.\n\n\n[Benchmark.js]: http://benchmarkjs.com/\n[task options]: http://benchmarkjs.com/docs#options\n",
  "readmeFilename": "README.md",
  "_id": "grunt-benchmark@0.2.0",
  "dist": {
    "shasum": "12f2ae4b920807274d3c7912f18ae36e91f45262"
  },
  "_from": "grunt-benchmark@~0.2.0",
  "_resolved": "https://registry.npmjs.org/grunt-benchmark/-/grunt-benchmark-0.2.0.tgz"
}
