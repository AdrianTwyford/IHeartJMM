/*
 * This script will be called during the installation process, specifically
 * during the postinstall hook.
 *
 * Its job is to create the symbolic links to the shared files based on the
 * developer specification in the `package.json`.
 *
 * See the main function comment to understand how it proceeds.
 */

var child_process = require('child_process');
var exec = child_process.exec;
var fs = require('fs');
var path = require('path');

/**
 * This function proceeds in the following order:
 * 1) Determine the root folder (where the `package.json` requiring this very
 *    package resides)
 * 2) Load the `package.json` from the root folder
 * 3) Browse the `sharedKarmaFiles` key from the previously loaded file and
 *    create the symlinks
 */
function main()
{
  var rootPackageJSON = loadRootPackageJSON();

  if (rootPackageJSON === null) {
    console.log('[Error] Unable to load the root `package.json` from the '
                + 'shared-karma-files postinstall script.');
    return 0;
  }

  // abort if the `sharedKarmaFiles` key is not found
  if (!(rootPackageJSON.hasOwnProperty('sharedKarmaFiles'))) {
    console.log('[Error] Unable to install the Karma shared files. ' +
                '`sharedKarmaFiles` key is missing in your `package.json`.');
    return 0;
  }

  for (var key in rootPackageJSON.sharedKarmaFiles) {
    if (!(rootPackageJSON.sharedKarmaFiles.hasOwnProperty(key))) {
      continue;
    }
    createSymbolicLink(key, rootPackageJSON.sharedKarmaFiles[key]);
  }

  return 0;
}

/**
 * Load and return the root `package.json`.
 */
function loadRootPackageJSON()
{
  var rootDir = findRootDir();
  var packageJSONFileName = 'package.json';
  var packageJSONFullPath = path.join(rootDir, packageJSONFileName);

  try {
    return require(packageJSONFullPath);
  } catch (e) {
    return null;
  }
}

/**
 * Return the project root directory path (three directories above).
 */
function findRootDir()
{
  // ./root_dir/node_modules/shared-karma-files/bin/
  //      ^    3            2                  1 ^
  var rootDir = path.resolve(path.join(__dirname, '..', '..', '..'));

  return rootDir;
}

/**
 * Return the shared directory path.
 */
function findSharedDir()
{
  var sharedDir = path.resolve(path.join(__dirname, '..', 'shared'));

  return sharedDir;
}

function createSymbolicLink(source, dest)
{
  var sourceDir = findSharedDir();
  var sourcePath = path.resolve(path.join(sourceDir, source));

  var destDir = findRootDir();
  var destPath = path.resolve(path.join(destDir, dest));

  // Delete the file in case it already exists
  fs.unlink(destPath, function() {
    // Create the symlink
    fs.symlink(sourcePath, destPath, function(err) {
      if (err) {
        console.log('[Warning] Cannot symlink the Karma shared file "'
                    + sourcePath + '" to "' + destPath + '".');
        return;
      }

      // Try to ignore the newly created file to avoid its presence as an
      // untracked/modified file by the Git SCM.
      // If `git` is not present on the system (nor in the $PATH), the execution
      // will silently abort (this is the expected behavior).
      exec('git update-index --assume-unchanged \'' + dest + '\'', {
        cwd: destDir
      });
    });
  });
}

return main();
