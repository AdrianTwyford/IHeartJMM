{
  "name": "tad",
  "version": "0.1.21",
  "description": "JavaScript test suite",
  "keywords": [
    "test",
    "factory",
    "unit",
    "unittest",
    "runner",
    "tests",
    "tdd",
    "testing"
  ],
  "author": {
    "name": "Mariusz Nowak",
    "email": "medikoo+tad@medikoo.com",
    "url": "http://www.medikoo.com/"
  },
  "bin": {
    "tad": "./bin/tad"
  },
  "main": "lib/suite",
  "repository": {
    "type": "git",
    "url": "git://github.com/medikoo/tad.git"
  },
  "bugs": {
    "url": "https://github.com/medikoo/tad/issues",
    "email": "medikoo+tad@medikoo.com"
  },
  "scripts": {
    "test": "node ./bin/tad lib"
  },
  "engines": {
    "node": ">=0.8"
  },
  "dependencies": {
    "cli-color": "~0.2.3",
    "clock": "~0.1.5",
    "deferred": "~0.6.6",
    "duration": "~0.1.4",
    "es5-ext": "~0.9.2",
    "event-emitter": "~0.2.2",
    "fs2": "~0.1.5",
    "next": "~0.3.3",
    "optimist": "0.6.x",
    "test": "0.6.x"
  },
  "devDependencies": {},
  "licence": "MIT",
  "readme": "# TAD - JavaScript test suite\n\nGoal of this framework is to allow writing tests with minimal hassle.\nTAD will locate your test file, and provide tested module for your test functions.\n\nExample console output:\n\n<img src=\"http://medyk.org/tad.png\" border=\"0\" width=\"718\" height=\"370\" />\n\n* [Installation](#installation)\n* [Usage](#usage)\n\t* [File managment](#usage-file-management)\n\t* [Test files](#usage-test-files)\n\t* [Test functions](#usage-test-functions)\n\t* [Assertions](#usage-assertions)\n\t* [Running tests](#usage-running-tests)\n* [TODO](#todo)\n\n<a name=\"installation\" />\n## Installation\n\n\t$ npm install tad\n\n<a name=\"usage\" />\n## Usage\n\n<a name=\"usage-file-management\" />\n### File management\n\nKeep your code in _lib_ folder and tests in _test_ folder.\nFor each file in in _lib_ folder have corresponding test file in _test_ folder.\n\n<a name=\"usage-test-files\" />\n### Test files\n\nTests should be written as set of functions, it can be just one function:\n\n\tmodule.exports = function (t, a, d) {\n\t\t// tests\n\t};\n\nor many thematically grouped functions:\n\n\texports[\"Test this\"] = function (t, a, d) {\n\t\t// tests\n\t};\n\texports[\"Test that\"] = function (t, a, d) {\n\t\t// tests\n\t};\n\n<a name=\"usage-test-functions\" />\n### Test functions\n\nArguments passed to test functions are:\n\n* __t__ - Tested module\n* __a__ - Assert object\n* __d__ - _Done_ function, it's for tests that need to be run asynchronously.\nYou may pass additional block of tests to this\nfunction and they'll be run right after. _d_ argument makes no sense for\nsynchrounous tests, declare such tests without it.\n\nAll arguments are optional, and by the way function is declared suite detect\nwhich arguments should be passed to test function. Examples:\n\n* Asynchronous test:\n\n\t\texports[\"Some tests\"] = funtcion (t, a, d) {\n\t\t\t// tests\n\t\t\tsetTimeout(function () {\n\t\t\t\t// tests\n\t\t\t\td();\n\t\t\t}, 100);\n\t\t};\n\n* Synchronous test:\n\n\t\texports[\"Some tests\"] = function (t, a) {\n\t\t\t// tests\n\t\t};\n\nTests can be nested, and declared various ways (synchronous/asynchronous)\n\n\tmodule.exports[\"Test all\"] = function (t, a) {\n\t\t// Preparation code\n\n\t\t// ... tests ...\n\n\t\treturn {\n\t\t\t\"Test this\": function () {\n\t\t\t\t// We already have module and assert object\n\t\t\t\t// ... tests ...\n\t\t\t},\n\t\t\t\"Test that async way\": function (d) {\n\t\t\t\t// This one is asynchronous\n\t\t\t\t// ... tests ....\n\n\t\t\t\tseTimeout(function () {\n\t\t\t\t\t// ... tests ...\n\t\t\t\t\td({\n\t\t\t\t\t\t\"Some extra tests\": function () {\n\t\t\t\t\t\t\t// ... tests ...\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}, 100);\n\t\t\t}\n\t\t};\n\t};\n\n<a name=\"usage-assertions\" />\n### Assertions\n\nTAD uses assert object from [UncommonJS tests runner](https://github.com/Gozala/test-commonjs/),\nIt's API is nearly same as of _assert_ that can be found in Node. Full spec is available at \nhttps://github.com/kriskowal/uncommonjs/blob/master/tests/specification.md .\n\nTAD adds some extra sugar to UncommonJS Assert object:\n\n* `a === a.strictEqual`, so you can write your assertions as:\n\n\t\ta(shouldBeTrue, true, \"It's true\");\n\t\t// it has same effect as:\n\t\ta.strictEqual(shouldBeTrue, true, \"It's true\");\n\n* `a.not` is an alias for `a.notStrictEqual`\n* `a.deep` is an alias for `a.deepEqual`\n* `a.notDeep` is an alias for `a.notDeepEqual`\n* `assert.never` with that you can check function paths that should never be called.\n\n<a name=\"usage-running-tests\" />\n### Running tests\n\nTest your file with provided binary:\n\n\t$ bin/tad lib/test-file\n\nor test all files in path:\n\n\t$ bin/tad lib\n\n<a name=\"todo\" />\n## TODO\n\n* Full custom context support\n* Code coverage\n* TAP support\n* jslint, jshint as side validation option\n* Port tests to browsers",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/medikoo/tad",
  "_id": "tad@0.1.21",
  "dist": {
    "shasum": "28e0084c842d298212296cb07336ba397fa9b498"
  },
  "_from": "tad@~0.1.19",
  "_resolved": "https://registry.npmjs.org/tad/-/tad-0.1.21.tgz"
}
