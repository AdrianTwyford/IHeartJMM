{
  "name": "component-remotes",
  "description": "Normalize remote end points",
  "version": "1.2.0",
  "author": {
    "name": "Jonathan Ong",
    "email": "me@jongleberry.com",
    "url": "http://jongleberry.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "component/remotes.js"
  },
  "dependencies": {
    "debug": "*",
    "generator-supported": "~0.0.1",
    "component-validator": "^1.0.0",
    "component-consoler": "^2.0.0",
    "graceful-fs": "^2.0.2",
    "semver": "^2.2.1",
    "cogent": "git://github.com/timaschew/cogent#fix-redirects",
    "co": "^3"
  },
  "devDependencies": {
    "mocha": "^1.17",
    "should": "^3.0",
    "gnode": "0",
    "regenerator": "0"
  },
  "scripts": {
    "test": "NODE=gnode make test",
    "prepublish": "make clean build"
  },
  "readme": "# Remotes.js [![Build Status](https://travis-ci.org/componentjs/remotes.js.png)](https://travis-ci.org/componentjs/remotes.js)\n\nThe goal of this repo is to normalize different remote endpoints for Component into a unified API.\nYou can also create your own remote endpoints instead of shoehorning different APIs into a JSON file.\nThis also handles versions and git trees, which is a little more complicated than just github raw.\n\nExample:\n\n```js\nvar Remotes = require('component-remotes');\nvar remotes = Remotes();\nremotes.use(new Remotes.Local({\n  dir: 'components'\n}));\nremotes.use(new Remotes.GitHub({\n  auth: 'jonathanong:password'\n}));\n\nco(function* () {\n  // get the correct remote from a list of remotes\n  var remote = yield* remotes.resolve('component/emitter');\n  // return all the versions this remote has\n  var versions = yield* remote.versions('component/emitter');\n  // do stuff with the versions\n})\n```\n\nA shortcut for the above is:\n\n```js\nvar remotes = require('component-remotes')(['github'], {\n  local: true,\n  dir: 'components',\n  netrc: '',\n})\n```\n\nWhere `netrc` points to a `netrc` file. See [camshaft/netrc](https://github.com/camshaft/netrc).\n\n## Using Remotes\n\n### var remotes = new Remotes([names], [options])\n\nReturns a group of remotes. `names` is a list of redefined remotes. Note that order matters.\n\nThe current remotes are:\n\n- `remotes.github`\n- `remotes.bitbucket`\n- `remotes.local` - use downloaded components\n\nThe list of names can be found at `Remotes.remotes`.\n\nSome options are:\n\n- `netrc` - for [camshaft/netrc](https://github.com/camshaft/netrc)\n- `dir` - local `components` path. Defaults to `process.cwd() + '/components'\n- `local` - use the `local` component.\n\n### remotes.use(remote)\n\nAdd a remote to this list of remotes. Note that order matters.\n\n### var remote = yield* remotes.resolve([names], repo, [ref])\n\nReturns the first remote with `<repo>@<ref>` from the list of remotes. You may optionally pass `names`, a list of remote names, instead of searching all the remotes or to search in a different order.\n\n### Authentication\n\nSome remotes, such as GitHub, require authentication. If you want to use authentication in your own remote implementation, we suggest you use [camshaft/netrc](https://github.com/camshaft/netrc).\n\nYou can see here how to [setup authentication](https://github.com/componentjs/guide/blob/master/changelogs/1.0.0.md#required-authentication).\n\n## Using a Remote\n\n### remote.name\n\nThe name of the remote.\n\n### var json = yield* remote.json(repo, [ref])\n\nReturn the `component.json` of a component from this remote.\n\n### var versions = yield* remote.versions(repo)\n\nGet all valid semver version of this remote.\n\n### var tree = yield* remote.tree(repo, ref)\n\nReturn the git tree of this repo. Will return a list of objects with properties:\n\n- `path` - file path in the repo\n- `sha` - sha1 check sum\n- `fize` - file byte length\n\n### var urls = remote.file(repo, ref, path)\n\nReturn an array of absolute URLs of where to download this component's file `path`.\n\n### var archive = remote.archive(repo, ref)\n\nReturn an object containing absolute URLs of where to download this repo's archive. `archive` is of the format `archive[format] = urls[]`. Example:\n\n```js\n{\n  tar: [\n    'https://api.github.com/repos/component/emitter/tarball/master',\n  ],\n  zip: [\n    'https://api.github.com/repos/component/emitter/zipball/master',\n  ]\n}\n```\n\n## Remote Notes\n\n- Only `master` is supported as the default branch.\n\n### BitBucket\n\n- Git trees are not supported, so please don't use globs in your `component.json`s!\n\n## Creating your own Remote\n\nYou may create your own remote. See the [remotes](https://github.com/component/remotes.js/tree/master/lib/remotes/github.js) for implementation examples.\n\n### Remotes.Remote.extend(Child)\n\nExtend a new `Remote` class with the current Remote. Example:\n\n```js\nvar Remote = require('component-remotes').Remote;\n\nfunction GitHub(options) {\n  options = options || {}\n  Remote.call(this, options)\n\n  this.something = 'asdf'\n}\n\nRemote.extend(GitHub)\n\nGithub.prototype.something = function () {\n\n}\n```\n\n### Implementable Functions\n\nThe following properties must be implemented. Note that if you want a remote to be skipped, simply return `null`.\n\n- `.name`\n- `._json()`\n- `._versions()`\n- `._tree()`\n- `.file()`\n- `.archive()`\n\nIf a function is not supported, simply do not define it.\nFor example, BitBucket does not support git trees, so `._tree()` is not defined.\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Jonathan Ong me@jongleberry.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "component-remotes@1.2.0",
  "_from": "component-remotes@^1.2.0"
}
