#!/usr/bin/env node

/**
 * Core dependencies.
 */

var fs = require('fs');
var resolve = require('path').resolve;

/**
 * External dependencies.
 */

var argv = require('argvee')();
var options = {};

/**
 * Internal dependencies.
 */

var hydro = require('..')();
var conf = [];

/*!
 * Setup files
 */

if (argv.param('setup')) {
  argv.param('setup').forEach(function(file) {
    conf.push(resolve(file));
  });
} else {
  conf.push(resolve('hydro.conf.js'));
}

delete argv.params['setup'];

/**
 * Commands.
 */

var commands = ['help', 'version'];

/**
 * Set `NODE_ENV` to test if none
 */

process.NODE_ENV = process.NODE_ENV || 'test';

/**
 * Load all tests.
 */

if (argv.commands.length) {
  options.tests = argv.commands;
}

/**
 * Try to load the setup files.
 */

conf.forEach(function(file) {
  if (fs.existsSync(file)) {
    var setup = require(file);
    if ('function' === typeof setup) setup(hydro);
  }
});

/**
 * Params which are always arrays
 */

var arrayParams = { plugins: true };

/*!
 * Migrate options
 */

for (var key in argv.params) {
  if (argv.params[key].length == 1 && !arrayParams[key]) {
    options[key] = argv.params[key][0];
  } else {
    options[key] = argv.params[key];
  }
}

argv.modes.forEach(function(mode) {
  options[mode] = true;
});

/**
 * Convert dashed keys to camel case. Basically
 * this will prettify the config. Things like
 * "clean-stacks" become "cleanStacks".
 */

Object.keys(options).forEach(function(key) {
  var camel = key.replace(/(\-[a-z])/g, function(match) {
    return match.replace('-', '').toUpperCase();
  });
  if (camel === key) return;
  options[camel] = options[key];
  delete options[key];
});

/**
 * resolve formatter relative to $PWD
 */

if ('formatter' in options) {
  options.formatter = resolve(options.formatter);
}

/**
 * Override the default options.
 */

hydro.set(options);

/**
 * Check if any of the main commands is being
 * requested.
 */

commands.forEach(function(command) {
  if (!argv.mode(command)) return;
  require('./commands/' + command)(hydro);
  process.exit(0);
});

/**
 * Failed tests counter.
 */

var failures = 0;

hydro.on('post:test', function(test) {
  failures += test.status === 'failed' ? 1 : 0;
});

/**
 * Seek and destroy.
 */

hydro.run(function(e) {
  if (e) throw e;
  process.exit(failures);
});
