{
  "name": "component-build",
  "description": "main logic for component's build command",
  "version": "1.2.2",
  "author": {
    "name": "Jonathan Ong",
    "email": "me@jongleberry.com",
    "url": "http://jongleberry.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "component/build.js"
  },
  "dependencies": {
    "debug": "*",
    "component-builder": "^1.1.12",
    "builder-es6-module-to-cjs": "^1.1.0",
    "builder-autoprefixer": "^1.0.3"
  },
  "devDependencies": {
    "component-resolver": "^1.2.1",
    "mocha": "^1.17.0",
    "gnode": "0",
    "regenerator": "0.4.6"
  },
  "main": "lib",
  "scripts": {
    "test": "NODE=gnode make test"
  },
  "readme": "# Component Build\n\nThis is a separate repo for the primary logic behind the `component-build` command.\nFeel free to fork this or use it as a baseline to create your own builder.\nThis is a thin wrapper around `component-builder2`.\n\nSome features included by default:\n\n- Scripts\n\n    - ES6 Module support\n    - Syntax error checking\n    - JSON files and JSON syntax error checking\n    - Templates as strings\n    - Autorequires the bundle by default\n    - Optional UMD wrap\n    - Resolves the entry point of the bundle automatically\n\n- Styles\n\n    - Automatic CSS autoprefixing\n    - Rewrite CSS URLs/ against an arbitrary prefix\n\n- Files\n\n    - Choose to copy or symlink files\n\n## API\n\n### var build = Build(tree, options)\n\n```js\nvar resolve = require('component-resolver');\nvar Build = require('component-build');\n\nvar write = fs.writeFileSync;\n\nvar options = {\n  development: true,\n  install: true,\n}\n\nresolve(process.cwd(), options, function (err, tree) {\n  if (err) throw err;\n\n  var build = Build(tree, options);\n\n  build.scripts(function (err, string) {\n    if (err) throw err;\n    if (!string) return;\n    write('build.js', string);\n  })\n\n  build.styles(function (err, string) {\n    if (err) throw err;\n    if (!string) return;\n    write('build.css', string);\n  })\n\n  build.files(function (err) {\n    if (err) throw err;\n  })\n})\n```\n\n`options` are passed to all builders and plugins.\nOptions other than those supported by `component-resolver` and `component-builder2` are:\n\n- `prefix` <''> - for rewriting URLs in CSS\n- `browsers` <''> - autoprefixer browser support\n- `umd` <false> - wrap the build in a UMD build with name `umd`\n- `autorequire` <true> - automatically require the entry point of the build\n\n### build.set(key, value)\n\nSet or change an option after initialization.\n\n```js\nbuild.set('development', false);\n```\n\n### build.scripts(callback)\n\nBuilds the JS.\nReturns `function (err, js) {}` where `js` is the build string.\nIf nothing was built, `js === ''`.\n\n### build.styles(callback)\n\nBuilds the CSS.\nReturns `function (err, css) {}` where `css` is the build string.\nIf nothing was built, `css === ''`.\n\n### build.files(callback)\n\nBuilds the files.\nReturns `function (err) {}`.\n\n### build.scriptPlugins(build, options)\n\nOptionally override the default plugins used for `.js` builds.\n`build` is a builder instance, and `options` are the options passed to `Build`.\nYou may overwrite this entirely if you'd like:\n\n```js\nvar build = Build(tree, options);\nbuild.scriptPlugins = function (build, options) {\n  build\n  .use('scripts',\n    es6modules(options),\n    plugins.js(options))\n  .use('json',\n    plugins.json(options))\n  .use('templates',\n    plugins.string(options));\n};\nbuild.scripts(function (err, js) {\n\n});\n```\n\nYou may also append or prepend plugins like so:\n\n```js\nvar defaults = build.scriptPlugins;\nbuild.scriptPlugins = function (build, options) {\n  build.use('templates', jade(options));\n  defaults(build, options);\n  build.use('jade', jade(options));\n}\n```\n\n`return`ing anything is NOT necessary.\nDo NOT call `.end()`.\n\nThis method is available on both the constructor and the prototype:\n\n```js\nvar Build = require('component-build');\nBuild.scriptPlugins === Build.prototype.scriptPlugins;\n```\n\n### build.stylePlugins(build, options)\n\nSame as `build.scriptPlugins()`, but with `.css`.\n\n### build.filePlugins(build, options)\n\nSame as `build.scriptPlugins()`, but with the files.\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2014 segmentio &lt;team@segment.io&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "component-build@1.2.2",
  "_from": "component-build@^1.2.2"
}
