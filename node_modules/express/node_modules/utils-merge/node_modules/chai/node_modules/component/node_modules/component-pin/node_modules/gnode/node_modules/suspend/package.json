{
  "author": {
    "name": "Jeremy Martin",
    "email": "jmar777@gmail.com",
    "url": "http://twitter.com/jmar777"
  },
  "name": "suspend",
  "description": "Callback-free control flow for node using ES6 generators.",
  "keywords": [
    "async",
    "generator",
    "yield",
    "callback",
    "promise",
    "flow",
    "control",
    "suspend"
  ],
  "version": "0.3.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/jmar777/suspend.git"
  },
  "main": "lib/suspend.js",
  "scripts": {
    "test": "node test/run.js"
  },
  "devDependencies": {
    "mocha": "1.11.x",
    "q": "0.9.x",
    "regenerator": "0.2.x",
    "semver": "2.2.x"
  },
  "engines": {
    "node": ">=0.11.2"
  },
  "license": "MIT",
  "readme": "# suspend\n\n**suspend** is a [generator](http://wiki.ecmascript.org/doku.php?id=harmony:generators)-based control-flow utility for Node that enables clean, pseudo-synchronous syntax for asynchronous interactions.  Specifically, suspend is a small abstraction around generators that is designed to \"play nice\" with Node's [callback conventions](http://docs.nodejitsu.com/articles/getting-started/control-flow/what-are-callbacks) and/or [promises](http://promises-aplus.github.io/promises-spec/).\n\n*Related reading: [What's the Big Deal with Generators?](http://devsmash.com/blog/whats-the-big-deal-with-generators)*\n\n## Quick Examples\n\n*Working with node-style callbacks:*\n\n```javascript\nvar suspend = require('suspend');\n\nsuspend(function* (resume) {\n    var data = yield fs.readFile(__filename, 'utf8', resume);\n    console.log(data);\n})();\n```\n\n*Working with promises:*\n\n```javascript\nvar suspend = require('suspend');\n\nsuspend(function* () {\n    var user = yield db.users.findWithPromise({ username: 'jmar777' });\n    console.log(user.favoriteColor);\n})();\n```\n\n## Installation\n\n```\n$ npm install suspend\n```\n\n## Usage\n\n*Note:* ES6 Generators are still hidden behind the `--harmony-generators` flag in V8:\n\n```\n$ node --harmony-generators your-script.js\n```\n\nWithout setting `--harmony-generators` you will get a syntax error.\n\n### API Overview\n\n#### `suspend(fn*)`\n\nThe suspend module exports the `suspend()` function.  You provide `suspend()` with a generator, and it returns a new \"initializer\" function:\n\n```javascript\nvar init = suspend(function* () {\n    console.log('hello!');\n});\n\ninit();\n// 'hello!'\n```\n\nOf course if you want to invoke it immediately, it would be more idiomatic to simply do so without the temporary assignment:\n\n```javascript\nsuspend(function* () {\n    console.log('hello!');\n})();\n```\n\nInitializing the generator is intentionally made optional, as sometimes you don't want it to run immediately.  For example, you may want to wait for an event before beginning execution:\n\n```javascript\nsomeEmitter.on('some-event', suspend(function* () {\n    ...\n}));\n```\n\n#### `resume`\n\nGiven that the majority of the Node ecosystem uses callbacks to handle asynchronous operations, suspend provides a simple mechanism for interacting with node-style callbacks: `resume`.\n\n```javascript\nsuspend(function* (resume) {\n    var data = yield fs.readFile(__filename, 'utf8', resume);\n})();\n```\n\nAnd just like that, we have our data - no callbacks, transpiling, or wrappers required!\n\nThe two things you should know about `resume` are:\n\n1. `resume` is nothing more than a reusable callback that is just barely smart enough to understand node-style callbacks.\n2. `resume` is added as the last argument to the generator function, making it optional.\n\nHere's a suspend example that accepts a parameter before the `resume` argument:\n\n```javascript\nvar printFile = suspend(function* (fileName, resume) {\n    console.log(yield fs.readFile(fileName, 'utf8', resume));\n});\n\nprintFile(__filename);\n```\n\nHere's another way to think about it: suspend is \"red light, green light\" for asynchronous code execution.  `yield` means stop, and `resume` means go.\n\n#### Promises\n\nUsing promises or a module that does? No problem (and no need for `resume` either):\n\n```javascript\nsuspend(function* () {\n    var user = yield UserModel.find({ username: 'jmar777' }).exec();\n    console.log(user.favoriteColor);\n})();\n```\n\nThe above is an example of working with [mongoose](http://mongoosejs.com/), which returns promises for async operations.  If a yield expression evaluates to a [\"thenable\"](https://github.com/promises-aplus/promises-spec#terminology), then suspend can figure out the rest.\n\n#### Error Handling\n\nBy default, suspend will throw errors back within the generator body, so try/catch's will work:\n\n```javascript\nsuspend(function* (resume) {\n    try {\n        var data = yield fs.readFile(__filename, 'utf8', resume);\n        console.log(data);\n    } catch (err) {\n        // handle error\n    }\n})();\n```\n\nNote: if you prefer returned errors, instead of thrown, be sure to read the documentation below on `.raw()`.\n\n#### `suspend.raw()`\n\nSuspend's default behavior assumes that...\n\n1. Callbacks will use Node's error-first callback convention\n2. If an error is returned, it should be thrown\n3. If there aren't any errors, then the first non-error result should be returned\n\nWhile this holds true for the vast majority of Node's use cases, we need a solution for when these assumptions fail.  Therefore, if for any reason you want to opt out of this \"smart\" handling of callbacks, simply use `.raw()`:\n\n```javascript\nvar suspend = require('suspend').raw();\n\nsuspend(function* (resume) {\n    var res = yield fs.readFile(__filename, 'utf8', resume);\n    console.log(res);\n    // --> [null, '...file contents...']\n})();\n```\n\nAs can be seen above, `suspend.raw()` provides \"raw\" access to all arguments passed to the callback.  No assumptions are made about the callback arguments and no errors will be thrown.  This behavior will apply to all yield expressions within the generator function.\n\nIf `.raw()` behavior is required on just a single yield expression, `resume.raw()` may be used instead:\n\n```javascript\nvar suspend = require('suspend');\n\nsuspend(function* (resume) {\n    // use raw behavior for a single yield expression\n    console.log(yield fs.readFile(__filename, 'utf8', resume.raw()));\n    // --> [null, '...file contents...']\n\n    // behavior returns to normal for next yield expression\n    console.log(yield fs.readFile(__filename, 'utf8', resume));\n    // --> '...file contents...'\n})();\n```\n\n### What about Parallel Execution, Mapping, Etc.?\n\nMore advanced flow constructs, in my opinion, have pretty elegant solutions through existing libraries like [async](https://github.com/caolan/async/).  While some basic parallelization support is planned, it is worth noting that suspend works quite nicely with your existing control flow library of choice.  For example, here's a modified snippet from the **async** README:\n\n```\nsuspend(function* (resume) {\n    var stats = yield async.map(['file1','file2','file3'], fs.stat, resume);\n})();\n```\n\nThis also begins to illustrate why suspend is designed to interoperate with Node's existing callback semantics - refactoring is simple and the new behavior is easy to reason about.\n\n## Versioning, Stability\n\nPlease note that generators are currently only supported in unstable (v0.11.x) versions of Node, and suspend itself is very new.  While the API is still rapidly evolving, suspend does use [SemVer](http://semver.org/) for versioning, so you don't need to worry about the rug being pulled out from under you in a patch release.\n\nI would greatly appreciate any feedback, so if you find anything or have any suggestions, please open an issue (or email me at jmar777@gmail.com)!\n\n## Running Tests\n\n```\n$ npm test\n```\n\n## License \n\nThe MIT License (MIT)\n\nCopyright (c) 2013 Jeremy Martin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jmar777/suspend/issues"
  },
  "homepage": "https://github.com/jmar777/suspend",
  "_id": "suspend@0.3.1",
  "_from": "suspend@~0.3.0"
}
