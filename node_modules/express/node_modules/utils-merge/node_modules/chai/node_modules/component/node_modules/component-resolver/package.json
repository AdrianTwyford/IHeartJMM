{
  "name": "component-resolver",
  "description": "resolve local and remote dependencies",
  "version": "1.3.0",
  "author": {
    "name": "Jonathan Ong",
    "email": "me@jongleberry.com",
    "url": "http://jongleberry.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "component/resolver.js"
  },
  "dependencies": {
    "generator-supported": "~0.0.1",
    "component-consoler": "^2.0.0",
    "component-validator": "^1.1.1",
    "component-flatten": "^1.0.1",
    "component-downloader": "^1.2.0",
    "component-remotes": "^1.2.0",
    "debug": "*",
    "graceful-fs": "^2.0.1",
    "unglob": "~0.1.2",
    "semver": "^2.2.1",
    "chanel": "^2.0.2",
    "co": "^3"
  },
  "devDependencies": {
    "gnode": "0",
    "mocha": "^1.17.0",
    "regenerator": "0.4.6",
    "rimraf": "^2.2.5",
    "should": "^3.0.0"
  },
  "scripts": {
    "test": "NODE=gnode make test",
    "prepublish": "make clean build"
  },
  "readme": "# component-resolver [![Build Status](https://travis-ci.org/componentjs/resolver.js.png)](https://travis-ci.org/componentjs/resolver.js)\n\nResolve a component's dependency tree.\n\n- Relies on components' newer [specs](https://github.com/component/spec)\n- Validates and normalizes `component.json`s\n- Supports installing components\n- Supports globs for both remote and local components\n- Supports semver resolution for dependencies\n\nThis uses:\n\n- [remotes](https://github.com/component/remotes.js) - normalize remote end points\n- [downloader](https://github.com/component/downloader.js) - downloads repositories\n- [flatten](https://github.com/component/flatten.js) - flatten a dependency tree into a list\n- [validator](https://github.com/component/validator.js) - validate `component.json`s\n\n## Example\n\n```js\nvar resolve = require('component-resolver');\nvar flatten = require('component-flatten');\n\nresolve({\n  // a \"component.json\"\n  dependencies: {\n    'component/emitter': '1.1.1'\n  }\n}, function (err, tree) {\n  if (err) throw err;\n\n  tree.dependencies['component/emitter'];\n  /**\n   * name: 'component/emitter'\n   * version: '1.1.1'\n   * ref: '1.1.1'\n   */\n\n   // flatten the dependency tree\n   var nodes = flatten(tree);\n   nodes[0].name === 'component/emitter';\n});\n```\n\n## API\n\n### resolve(component, [options], [callback])\n\n`component` can be a \"root\" folder, `process.cwd()` by default. `component` can also be \"component.json\" object. This is useful for resolving dependencies without reading anything from disk. You __should__ at least set it to `null`.\n\nThe main `options` are:\n\n- `root` <process.cwd()> - if `component.json` is an object, this will set the root.\n- `remote` - a `remotes` instance. Defaults to the local `dir` and `github`.\n- `local` <true> - try resolving against locally installed components. Only relevant if you don't set a remote.\n- `development` <false> - include `development` in `local` components\n- `dependencies` <true> - resolve dependencies\n- `verbose` <false> - print warnings and status messages\n- `concurrency` <{}> - an object with concurrency values for different channels. Defaults:\n\n    - `locals: 16`\n    - `dependencies: 5`\n    - `semver: 1`\n    - `installs: 5`\n    - `downloads: 1`\n\nOptions passed to `component-downloader`:\n\n- `install` <false> - install components to `out`\n- `out` <`components`> - folder to install components to\n- `fields` - fields of `component.json`s to download files, defaults to those defined in the spec\n- `archive` - install entire repositories instead of just necessary files\n\n`callback` is a function with signature `(err, tree)`. You if no callback is set, a generator is returned.\n\n```js\nresolve(root, options, function (err, tree) {\n\n});\n\n// or if you use generators\n\nco(function* () {\n  var tree = yield* resolve(root, options);\n})();\n```\n\n### tree and branches\n\nThis resolver returns a `tree`. The tree consists of `branches` that connect `nodes`. Each `node` is the relevant `component.json`. Thus, you can view the `branches` as how each component relates to each other as well as additional metadata.\n\nThere are two types of branches: `local` for local components and `dependency` for remote components. Properties:\n\n- `type` - either `local` or `dependency`\n- `name`\n- `canonical` - a canonical, unique name for this component. For remote dependencies, this is `<user>~<project>@<reference>`. For local components, this is the relative path from `root` to this component's `path`. `~` is used instead of `/` or `-` to ensure canonical names are in fact unique and do not look like paths.\n- `dependencies` {} - remote dependencies of this component\n- `locals` {} - local dependencies of this component\n- `dependents` [] - dependents of this component\n- `node` - the node's `component.json`\n- `path` - the path of the component, not including `/component.json`.\n- `filename` - the filename of this `component.json`\n- `paths` - absolute `.paths` of this component. `paths` are inherited from their parent.\n- `remotes` - list of remote names to lookup dependencies of this component. `remotes` are inherited from their parent.\n- `resolvedRemotes` - a list of all the remotes, including this component's parents'\n\nLocals additionally have:\n\n- `relativePath` - relative path to the local component's folder resolved against `root`\n\nDependencies additionally have:\n\n- `ref` - git reference such as `master`, `v1.0.0`, etc.\n- `version` - the semantic version, if any\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Jonathan Ong me@jongleberry.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "component-resolver@1.3.0",
  "_from": "component-resolver@^1.3.0"
}
