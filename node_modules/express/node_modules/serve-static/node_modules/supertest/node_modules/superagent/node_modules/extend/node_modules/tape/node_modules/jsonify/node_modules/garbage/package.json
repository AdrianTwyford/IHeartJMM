{
  "name": "garbage",
  "version": "0.0.0",
  "description": "generate garbage json data",
  "main": "index.js",
  "directories": {
    "lib": ".",
    "example": "example",
    "test": "test"
  },
  "devDependencies": {
    "tap": "0.0.x",
    "traverse": "0.4.x"
  },
  "scripts": {
    "test": "tap test"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/substack/node-garbage.git"
  },
  "keywords": [
    "garbage",
    "dummy",
    "random",
    "data"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT/X11",
  "engine": {
    "node": ">=0.4"
  },
  "readme": "garbage\n=======\n\nGenerate random garbage json data.\n\nexample\n=======\n\n````\n> var garbage = require('garbage')\n> garbage()\n4.136307826118192\n> garbage()\n-7.327021010101647\n> garbage()\n{ '0\\t4$$c(C&s%': {},\n  '': 2.221633433726717,\n  '!&pQw5': '<~.;@,',\n  'I$t]hky=': {},\n  '{4/li(MDYX\"': [] }\n> garbage()\nfalse\n````\n\nmethods\n=======\n\nvar garbage = require('garbage');\n\ngarbage(count=20)\n-----------------\n\nGenerate a random type of object with at most `count` nested types.\n\nAlias: garbage.json\n\ngarbage.object(count=20)\n------------------------\n\nGenerate a random object with at most `count` randomly generated descendants.\n\ngarbage.array(count=20)\n------------------------\n\nGenerate a random array with at most `count` randomly generated descendants.\n\ngarbage.string()\n----------------\n\nGenerate a randomish string.\n\ngarbage.boolean()\n-----------------\n\nReturns true or false.\n\ngarbage.number()\n----------------\n\nReturns a random float but more likely to return floats closer to 0.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n    npm install garbage\n",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/substack/node-garbage/issues"
  },
  "homepage": "https://github.com/substack/node-garbage",
  "_id": "garbage@0.0.0",
  "_from": "garbage@0.0.x"
}
