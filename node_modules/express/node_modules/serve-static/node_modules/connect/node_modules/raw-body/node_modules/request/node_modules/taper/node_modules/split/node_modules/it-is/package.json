{
  "name": "it-is",
  "description": "terse functional assertion framework",
  "version": "1.0.3",
  "homepage": "http://github.com/dominictarr/it-is",
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/it-is.git"
  },
  "author": {
    "name": "Dominic Tarr",
    "email": "dominic.tarr@gmail.com"
  },
  "main": "./it-is.js",
  "directories": {
    "lib": "."
  },
  "dependencies": {
    "traverser": "0.0.x",
    "render": "~0.1.4",
    "trees": "0.0.x",
    "style": "0.1.x",
    "assertions": "~2.3.1"
  },
  "devDependencies": {
    "synct": "1"
  },
  "scripts": {
    "test": "synct test/*.js"
  },
  "engines": {
    "node": ">=0.2.0"
  },
  "readme": "\n#It-Is#\n\na terse assertion DSL, inheriting from node's assert module, but enhanced with the power of functional programming & colours!\n\n# Basic Usage#\n\n    var it = require('it-is')\n   \n    it(actual).equal(10)\n\n# High-level Usuage #\n\n`every` applies an assertion function to every item in a list.\n\n    it(arrayOfNumbers)\n      .every(it.typeof('number'))\n    \n\n`has` applies assertion functions to leaves of a tree.\n\n    it({a:1, b: 3})\n      .has({\n        a: it.typeof('number').notEqual(3)\n      , b: it.equal(3)\n      })\n\nhuh?\n\nif you call `it` with an argument `it(actual)` assertions chained will be applied immediately.\n\n    it(actual).equal(expected) \n\nis that same as \n\n    assert.equal(actual,expected)\n\nif you don't provide an argument, but just start chaining `it.equal(expected)`, it returns a function which makes that assertion.\n\n    it.typeof('number').notEqual(unexpected)\n    \nreturns a function like this:\n\n    function (actual){\n      assert.typeof(actual,'number') //not in node's assert. added in it-is\n      assert.notEqual(actual,unexpected)\n    }\n\npass these functions into It-Is's every and has for terse assertion easyness!\n\nthen glance at the error messages which are highlighted to show the exact point the assertion failed:\n\n<img src=\"https://github.com/dominictarr/it-is/raw/master/screenshot.png\" border = \"0\"/>\n\n#Assertion Methods#\n\nnode's assert module methods:\n\n`ok`,`equal`,`notEqual`,`deepEqual`,`notDeepEqual`,`strictEqual`,`notStrictEqual`,`throws`,`doesNotThrow`,`ifError`\n\nand also:\n\n##typeof##\nassert type, expected can be 'string', 'number', 'boolean', 'object', 'function', or 'undefined'\n\n    it(actual).typeof(type)\n\n##instanceof##\nassert instanceof, expected should be a constructor function\n\n    it(actual).instanceof(constructor) \n    \nexample:\n    \n    it([]).instanceof(Array)\n\n##primitive##\nassert is not an object or a function\n\n    it(7).primitive()\n\n##complex##\nassert is an object or a function\n\n    it({}).complex()\n    \n##function##\nassert is a function\n\n\n    it(function(){}).function()\n\n##matches##\nassert matches a regular expresson\n\n    it(actual).matches(regex)\n    \nexample:\n    \n    it('asdf@asdf.com').matches(/^([^@\\s]+)@((?:[-a-z0-9]+\\.)+[a-z]{2,})$/)\n\n##like##\nassert two strings match, but ignoring case, white space and whether quotes are \" or '. (is configurable)\n\n  it(actual).like(expected, options)\n\noptions object is optional! but should be this format:\n\n    {case: boolean,whitespace: boolean, quotes: boolean}\n\n##every##\n\napply assertions to every item in an array\n\n    it(array).every(assertion)\n\nexample:\n  \n    it([1,2,3,4,5]).every(it.typeof('number').notEqual(0))\n    \nassertion is just a function\n\n    it([\n      [1,1.0]\n    , [1,1e0]\n    , [1,7/7]\n    ]).every(function (line){\n      assert.equal(line[0],line[1])\n    })\n      \n##property##\n\napply check that it has a property and apply an assertion\n\n    it(actual).property(name,value) //checks that actual[name] == value\n\nor if value is a function:\n    \n    it(actual).property(name,assertion) //checks that assertion(actual[name])\n\nexample:\n\n    it([]).property('length',0)\n    \n    it({a: /sdf/}).property('a',it.instanceof(RegExp))\n\n##has##\n\napply asssertions to properties of an object, checking that properties and actually there first.\n\n    it(actual).has(properties)\n\nif a property is primitive, it's checked for equality.\nif a property is a function, it's called with actual's corrisponding property as the argument.\n\nexample:\n\n    it({\n        a: 1\n      , b: 2\n      , c: { x: true }\n      , d: [1,2,3,4,5,true,'string'] \n      })\n      .has({\n        a: it.notEqual(0)\n      , b: 2 //values are treated like it.equal(value)\n      , c: it.complex()\n      , d: it.every(it.primitive())\n      })\n\n\nenjoy!\n\nnext, implement and document how to add assertion functions and renderers and render styles.\n",
  "readmeFilename": "readme.markdown",
  "bugs": {
    "url": "https://github.com/dominictarr/it-is/issues"
  },
  "_id": "it-is@1.0.3",
  "dist": {
    "shasum": "b84d49027564f09904a864b93c142480dea1a2d0"
  },
  "_from": "it-is@1",
  "_resolved": "https://registry.npmjs.org/it-is/-/it-is-1.0.3.tgz"
}
