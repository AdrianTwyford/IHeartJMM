{
  "name": "lab",
  "description": "Test utility",
  "version": "5.5.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/lab"
  },
  "main": "index",
  "keywords": [
    "test"
  ],
  "engines": {
    "node": ">=0.10.32"
  },
  "dependencies": {
    "bossy": "1.x.x",
    "esprima": "1.x.x",
    "handlebars": "2.x.x",
    "items": "1.x.x",
    "diff": "1.x.x",
    "source-map-support": "0.2.x",
    "eslint": "0.17.x",
    "hoek": "2.x.x",
    "mkdirp": "0.5.x",
    "jslint": "0.7.x"
  },
  "optionalDependencies": {
    "jslint": "0.7.x"
  },
  "devDependencies": {
    "code": "1.x.x",
    "lab-event-reporter": "1.x.x"
  },
  "bin": {
    "lab": "./bin/lab"
  },
  "scripts": {
    "test": "./bin/_lab -fL -t 100 -m 3000",
    "test-cov-html": "./bin/_lab -fL -r html -m 3000 -o coverage.html"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/hapijs/lab/raw/master/LICENSE"
    }
  ],
  "contributors": [
    {
      "name": "Eran Hammer",
      "email": "eran@hammer.io",
      "url": "http://hueniverse.com"
    },
    {
      "name": "Wyatt Preul",
      "email": "wpreul@gmail.com",
      "url": "http://jsgeek.com"
    }
  ],
  "readme": "![lab Logo](https://raw.github.com/hapijs/lab/master/images/lab.png)\n\nNode test utility\n\n[![Build Status](https://secure.travis-ci.org/hapijs/lab.png)](http://travis-ci.org/hapijs/lab)\n\nLead Maintainer: [Wyatt Preul](https://github.com/geek)\n\n\n## Introduction\n\n**lab** is a simple test utility for node. Unlike other test utilities, lab uses domains instead of uncaught exception and other\nglobal manipulation. Our goal with **lab** is to keep the execution engine as simple as possible, and not try to build an extensible framework.\n**lab** works with any assertion library that throws an error when a condition isn't met.\n\n## Command Line\n\n**lab** supports the following command line options:\n- `-c`, `--coverage` - enables code coverage analysis.\n- `-C`, `--colors` - enables or disables color output. Defaults to console capabilities.\n- `-d`, `--dry` - dry run. Skips all tests. Use with `-v` to generate a test catalog. Defaults to `false`.\n- `-D`, `--debug` - print the stack during a domain error event.\n- `-e`, `--environment` - value to set the `NODE_ENV` environment variable to, defaults to 'test'.\n- `-f`, `--flat` - do not perform a recursive load of test files within the test directory.\n- `-g`, `--grep` - only run tests matching the given pattern which is internally compiled to a RegExp.\n- `-h`, `--help` - show command line usage.\n- `-i`, `--id` - only run the test for the given identifier (or identifiers range).\n- `-I`, `--ignore` - ignore a list of globals for the leak detection (comma separated)\n- `-l`, `--leaks` - disables global variable leak detection.\n- `-L`, `--lint` - run linting rules using linter.  Disabled by default.\n- `-m`, `--timeout` - individual tests timeout in milliseconds (zero disables timeout). Defaults to 2 seconds.\n- `-M`, `--context-timeout` - default timeouts for before, after, beforeEach and afterEach in milliseconds. Disabled by default.\n- `-n`, `--linter` - specify linting program; default is `eslint`.\n- `--lint-options` - specify options to pass to linting program. It must be a string that is JSON.parse(able).\n- `-o`, `--output` - file to write the report to, otherwise sent to stdout.\n- `-p`, `--parallel` - sets parallel execution as default test option. Defaults to serial execution.\n- `-r`, `--reporter` - the reporter used to generate the test results. Defaults to `console`. Options are:\n    - `console` - text report.\n    - `html` - HTML test and code coverage report (sets `-c`).\n    - `json` - output results in JSON format.\n    - `junit` - output results in JUnit XML format.\n    - `tap` - TAP protocol report.\n    - `lcov` - output to [lcov](http://ltp.sourceforge.net/coverage/lcov/geninfo.1.php) format.\n    - `clover` - output results in [Clover XML](https://confluence.atlassian.com/display/CLOVER) format.\n    - [Custom Reporters](#custom-reporters) - See Below\n- `-s`, `--silence` - silence test output, defaults to false.\n- `-S`, `--sourcemaps` - enables sourcemap support for stack traces and code coverage, disabled by default.\n- `-t`, `--threshold` - minimum code test coverage percentage (sets `-c`), defaults to 100%.\n- `-T`, `--transform` - javascript file that exports an array of objects ie. `[ { ext: \".js\", transform: function (content, filename) { ... } } ]`. Note that if you use this option with -c (--coverage), then you must generate sourcemaps and pass sourcemaps option to get proper line numbers.\n- `-v`, `--verbose` - verbose test output, defaults to false.\n- `-a`, `--assert` - name of assert library to use.\n\n## Usage\n\nTo install **lab** globally:\n```bash\n$ npm install -g lab\n```\n\nTo use locally:\n```bash\n$ npm install --save-dev lab\n```\n\nBy default, **lab** loads all the '\\*.js' files inside the local 'test' directory and executes the tests found.  To use different directories or files, pass the file or directories as arguments:\n\n```bash\n$ lab unit.js\n```\n\nTest files must require the **lab** module, and export a test script:\n```javascript\nvar Code = require('code');   // assertion library\nvar Lab = require('lab');\nvar lab = exports.lab = Lab.script();\n\nlab.test('returns true when 1 + 1 equals 2', function (done) {\n\n    Code.expect(1+1).to.equal(2);\n    done();\n});\n```\n\nWhen a test is completed, `done(err)` must be called, otherwise the test will time out (2 seconds by default) and will fail.\nThe test passes if `done()` is call once before the timeout, no exception thrown, and no arguments are passed to `done()`.\nIf no callback function is provided, the test is considered a TODO reminder and will be skipped.\n\nTests can be organized into experiments:\n```javascript\nlab.experiment('math', function () {\n\n    lab.test('returns true when 1 + 1 equals 2', function (done) {\n\n        Code.expect(1+1).to.equal(2);\n        done();\n    });\n});\n```\n\nIf you need to perform some async actions before or after executing the tests inside an experiment, the `before()` and\n`after()` methods can be used. To execute code before or after each test in an experiment, use `beforeEach()` and `afterEach()`.\n\n```javascript\nlab.experiment('math', function () {\n\n    lab.before(function (done) {\n\n        // Wait 1 second\n        setTimeout(function () { done(); }, 1000);\n    });\n\n    lab.beforeEach(function (done) {\n\n        // Run before every single test\n        done();\n    });\n\n    lab.test('returns true when 1 + 1 equals 2', function (done) {\n\n        Code.expect(1+1).to.equal(2);\n        done();\n    });\n});\n```\n\nBoth `test()` and `experiment()` accept an optional `options` argument which must be an object with the following optional keys:\n- `timeout` -  set a test or experiment specific timeout in milliseconds. Defaults to the global timeout (`2000`ms or the value of `-m`).\n- `parallel` - sets parallel execution of tests within each experiment level. Defaults to `false` (serial execution).\n- `skip` - skip execution. Cannot be overridden in children once parent is set to skip.\n- `only` - marks all other tests or experiments with `skip`.  This doesn't mark all other experiments and tests in a suite of scripts as skipped, instead it works within a single test script.\n\n`before()`, `after()`, `beforeEach()`, `afterEach()` accept an optional `options` argument which must be an object with the following optional keys:\n- `timeout` -  set a specific timeout in milliseconds. Disabled by default or the value of `-M`.\n\n```javascript\nlab.experiment('math', { timeout: 1000 }, function () {\n\n    lab.before({ timeout: 500 }, function (done) {\n\n        doSomething();\n        done();\n    });\n\n    lab.test('returns true when 1 + 1 equals 2', { parallel: true }, function (done) {\n\n        Code.expect(1+1).to.equal(2);\n        done();\n    });\n});\n```\n\nThe `script([options])` method takes an optional `options` argument where `options` is an object with the following optional keys:\n- `schedule` - if `false`, an automatic execution of the script is disabled. Automatic execution allows running lab test scripts directly\n  with node without having to use the cli (e.g. `node test/script.js`). When using **lab** programmatically, this behavior is undesired and\n  can be turned off by setting `schedule` to `false`. Defaults to `true`.\n- `cli` - allows setting command line options within the script. Note that the last script file loaded wins and usage of this is recommended\n  only for temporarily changing the execution of tests. This option is useful when code working with an automatic test engine that runs test\n  on commits. Setting this option has no effect when not using the CLI runner. For example setting `cli` to `{ ids: [1] }` will only execute\n  the first test loaded.\n\nTo make **lab** look like BDD:\n```javascript\nvar Code = require('code');\nvar Lab = require('lab');\nvar lab = exports.lab = Lab.script();\n\nvar describe = lab.describe;\nvar it = lab.it;\nvar before = lab.before;\nvar after = lab.after;\nvar expect = Code.expect;\n\ndescribe('math', function () {\n\n    it('returns true when 1 + 1 equals 2', function (done) {\n\n        expect(1+1).to.equal(2);\n        done();\n    });\n});\n```\n\nTo make **lab** look like TDD:\n```javascript\nvar Code = require('code');\nvar Lab = require('lab');\nvar lab = exports.lab = Lab.script();\n\nvar suite = lab.suite;\nvar test = lab.test;\nvar before = lab.before;\nvar after = lab.after;\nvar expect = Code.expect;\n\nsuite('math', function () {\n\n    test('returns true when 1 + 1 equals 2', function (done) {\n\n        expect(1+1).to.equal(2);\n        done();\n    });\n});\n```\n\nTo use source transforms, you must specify a file that tells Lab how to do the transformation. You can specify many extensions with different transform functions such as `.coffee` or `.jsx`. A sample file using the babel transpiler could look like:\n```javascript\nvar Babel = require('babel-core');\n\nmodule.exports = [\n    {ext: '.js', transform: function (content, filename) {\n\n        // Make sure to only transform your code or the dependencies you want\n        if (filename.indexOf('node_modules') === -1) {\n          var result = Babel.transform(content, { sourceMap: 'inline', filename: filename, sourceFileName: filename });\n          return result.code;\n        }\n\n        return content;\n    }}\n];\n```\n\n## Ignoring files in linting\nSince [eslint](http://eslint.org/) is used to lint, you can create an `.eslintignore` containing paths to be ignored:\n```\nnode_modules/*\n**/vendor/*.js\n```\n\n## Best practices\n\n- Install **lab** as a global module:\n\n```bash\n$ npm install -g lab\n```\n\n- Add lab as a dev dependency to your project's `package.json` along with a `test` script:\n\n```json\n{\n  \"name\": \"example\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n  },\n  \"devDependencies\": {\n    \"lab\": \"5.x.x\"\n  },\n  \"scripts\": {\n    \"test\": \"lab -t 100\",\n    \"test-cov-html\": \"lab -r html -o coverage.html\"\n  },\n  \"licenses\": [\n    {\n      \"type\": \"BSD\",\n      \"url\": \"http://github.com/hapijs/lab/raw/master/LICENSE\"\n    }\n  ]\n}\n```\n\nNote that `npm test` will execute **lab** with the `-t 100` option which will require 100% code coverage. Change or remove\nthis option if you just cannot be bothered with producing quality code. Run `npm run test-cov-html` and check the `coverage.html`\nfile to figure out where coverage is lacking.\n\n- Run your tests with\n\n```bash\n$ npm test\n```\n\n## Custom Reporters\n\nIf the value passed for `reporter` isn't included with Lab, it is loaded from the filesystem.\nIf the string starts with a period (`'./custom-reporter'`), it will be loaded relative to the current working directory.\nIf it doesn't start with a period (`'custom-reporter'`), it will be loaded from the `node_modules` directory, just like any module installed using `npm install`.\n\nReporters must be a class with the following methods: `start`, `test` and `end`. `options` are passed to the class constructor upon initialization.\n\nSee the [json reporter](lib/reporters/json.js) for an good starting point.\n\n## Acknowledgements\n\n**lab** initial code borrowed heavily from [mocha](http://mochajs.org/), including the actual code used to render\nthe coverage report into HTML. **lab** coverage code was originally adapted from [blanket](https://github.com/alex-seville/blanket)\nwhich in turn uses [falafel](https://github.com/substack/node-falafel).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hapijs/lab/issues"
  },
  "homepage": "https://github.com/hapijs/lab",
  "_id": "lab@5.5.1",
  "_from": "lab@5.x.x"
}
