{
  "name": "covert",
  "version": "1.0.1",
  "description": "code coverage command con coverify",
  "bin": {
    "covert": "bin/cmd.js"
  },
  "dependencies": {
    "browserify": "^6.0.3",
    "coverify": "^1.0.7",
    "parents": "^1.0.0",
    "resolve": "~0.7.4",
    "minimist": "^1.0.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/covert.git"
  },
  "homepage": "https://github.com/substack/covert",
  "keywords": [
    "code",
    "coverage",
    "coverify",
    "instrumentation"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "engines": {
    "node": ">= 0.6"
  },
  "license": "MIT",
  "readme": "# covert\n\ncode coverage command\n\n# example\n\nJust run `covert` on some ordinary files:\n\n```\n$ covert test/*.js\nTAP version 13\n# defined-or\nok 1 empty arguments\nok 2 1 undefined\nok 3 2 undefined\nok 4 4 undefineds\nok 5 false[0]\nok 6 false[1]\nok 7 zero[0]\nok 8 zero[1]\nok 9 first arg\nok 10 second arg\nok 11 third arg\n# (anonymous)\nok 12 should be equal\n\n1..12\n# tests 12\n# pass  12\n\n# ok\n\n# /home/substack/projects/defined/index.js: line 3, column 18-26\n\n  if (false) dead();\n             ^^^^^^^\n\n# /home/substack/projects/defined/index.js: line 6, column 16-18, 19-25, 26-30, 31-51\n\n  for (var i = 0; i < 5; i++) console.log('blah');\n               ^  ^^^^^  ^^^  ^^^^^^^^^^^^^^^^^^^\n\n# /home/substack/projects/defined/index.js: line 10, column 3-24\n\n  console.log('blah');\n  ^^^^^^^^^^^^^^^^^^^^\n\n# coverage: 76/82 (92.68 %)\n\nnon-zero exit code in `coverify` command\n```\n\nIn this example, this test suite is using\n[tape](https://npmjs.org/package/tape). Tests written with tape can just be run\ndirectly using `node`, which fits very well with what this command expects.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install -g covert\n```\n\n# usage\n\n```\nusage: covert {OPTIONS} FILES\n\n  Instrument FILES and in-module dependencies, writing coverage data to STDERR.\n\n  OPTIONS are:\n\n    --json\n\n      Suppress normal output and print json coverage data to stdout.\n\n    -q, --quiet  \n\n      Only print coverage data, suppressing all other output.\n\n    -c, --color\n\n      Use color in the output. Default: true if stdout is a TTY.\n\n```\n\n# why\n\nMost code coverage libraries do weird things I don't like, such as writing all\ntheir junk to directories and files in a completely out-of-band way.\n\ncovert:\n\n* only uses stderr and stdout, doesn't write to any files.\nAll of this business about `lcov` files and directories with reports in them\nreally weirds me out.\n\n* bundles with `browserify --bare` and a transform instead of hijacking\n`require()`. All the reporting goes through a unix pipeline on process.stdin and\nprocess.stdout. This is still hacky, but it's the kind of hacky that you can fix\nyourself when the magic breaks down. The internal pipeline is just:\n\n```\nbrowserify -t coverify --bare $* | node | coverify\n```\n\n* works really well with simple unix pipelines.\nstdin and stdout: the wisdom of the ancients.\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "bugs": {
    "url": "https://github.com/substack/covert/issues"
  },
  "_id": "covert@1.0.1",
  "_from": "covert@*"
}
