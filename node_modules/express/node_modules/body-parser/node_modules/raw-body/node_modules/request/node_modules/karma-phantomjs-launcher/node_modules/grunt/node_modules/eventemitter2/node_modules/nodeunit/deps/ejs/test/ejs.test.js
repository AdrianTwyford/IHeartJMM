
/**
 * Module dependencies.
 */

var ejs = require('../')
  , assert = require('assert');

module.exports = {
  'test .version': function(){
    assert.ok(/^\d+\.\d+\.\d+$/.test(ejs.version), 'Test .version format');
  },
  
  'test html': function(){
    assert.equal('<p>yay</p>', ejs.render('<p>yay</p>'));
  },
  
  'test buffered code': function(){
    var html = '<p>tj</p>',
      str = '<p><%= name %></p>',
      locals = { name: 'tj' };
    assert.equal(html, ejs.render(str, { locals: locals }));
  },
  
  'test unbuffered code': function(){
    var html = '<p>tj</p>',
      str = '<% if (name) { %><p><%= name %></p><% } %>',
      locals = { name: 'tj' };
    assert.equal(html, ejs.render(str, { locals: locals }));
  },
  
  'test `scope` option': function(){
    var html = '<p>tj</p>',
      str = '<p><%= this %></p>';
    assert.equal(html, ejs.render(str, { scope: 'tj' }));
  },
  
  'test escaping': function(){
    assert.equal('&lt;script&gt;', ejs.render('<%= "<script>" %>'));
    assert.equal('<script>', ejs.render('<%- "<script>" %>'));
  },
  
  'test newlines': function(){
    var html = '\n<p>tj</p>\n<p>tj@sencha.com</p>',
      str = '<% if (name) { %>\n<p><%= name %></p>\n<p><%= email %></p><% } %>',
      locals = { name: 'tj', email: 'tj@sencha.com' };
    assert.equal(html, ejs.render(str, { locals: locals }));
  },
  
  'test single quotes': function(){
    var html = '<p>WAHOO</p>',
      str = "<p><%= up('wahoo') %></p>",
      locals = { up: function(str){ return str.toUpperCase(); }};
    assert.equal(html, ejs.render(str, { locals: locals }));
  },

  'test single quotes in the html': function(){
    var html = '<p>WAHOO that\'s cool</p>',
      str = '<p><%= up(\'wahoo\') %> that\'s cool</p>',
      locals = { up: function(str){ return str.toUpperCase(); }};
    assert.equal(html, ejs.render(str, { locals: locals }));
  },

  'test multiple single quotes': function() {
    var html = "<p>couldn't shouldn't can't</p>",
      str = "<p>couldn't shouldn't can't</p>";
    assert.equal(html, ejs.render(str));
  },

  'test single quotes inside tags': function() {
    var html = '<p>string</p>',
      str = "<p><%= 'string' %></p>";
    assert.equal(html, ejs.render(str));
  },

  'test back-slashes in the document': function() {
    var html = "<p>backslash: '\\'</p>",
      str = "<p>backslash: '\\'</p>";
    assert.equal(html, ejs.render(str));
  },
  
  'test double quotes': function(){
    var html = '<p>WAHOO</p>',
      str = '<p><%= up("wahoo") %></p>',
      locals = { up: function(str){ return str.toUpperCase(); }};
    assert.equal(html, ejs.render(str, { locals: locals }));
  },
  
  'test multiple double quotes': function() {
    var html = '<p>just a "test" wahoo</p>',
      str = '<p>just a "test" wahoo</p>';
    assert.equal(html, ejs.render(str));
  },
  
  'test whitespace': function(){
    var html = '<p>foo</p>',
      str = '<p><%="foo"%></p>';
    assert.equal(html, ejs.render(str));

    var html = '<p>foo</p>',
      str = '<p><%=bar%></p>';
    assert.equal(html, ejs.render(str, { locals: { bar: 'foo' }}));
  },
  
  'test custom tags': function(){
    var html = '<p>foo</p>',
      str = '<p>{{= "foo" }}</p>';

    assert.equal(html, ejs.render(str, {
      open: '{{',
      close: '}}'
    }));

    var html = '<p>foo</p>',
      str = '<p><?= "foo" ?></p>';

    assert.equal(html, ejs.render(str, {
      open: '<?',
      close: '?>'
    }));
  },

  'test custom tags over 2 chars': function(){
    var html = '<p>foo</p>',
      str = '<p>{{{{= "foo" }>>}</p>';

    