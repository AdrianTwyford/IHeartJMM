var suspend = require('./'),
    Q = require('q'),
    fs = require('fs'),
    _ = require('underscore'),
    request = require('request');

// suspend(function* (resume) {
//  // read the current file
//  var res = yield fs.readFile(__filename, { encoding: 'utf8' }, resume);
//  // replace tabs with spaces
//  var newContents = res[1].replace(/\t/g, '    ');
//  // write back changes
//  //yield fs.writeFile(__filename, newContents, resume);
//  // print modified file
//  var modified = yield fs.readFile(__filename, { encoding: 'utf8'}, resume);
//  console.log(modified[1]);
// })();


// suspend(function* (resume) {
//  console.log('starting cb version');
//  yield sleepCb(1000, resume);
//  console.log('done');

//  console.log('starting promise version');
//  yield sleepPromises(1000);
//  console.log('done');
// })();


// function sleepCb(duration, cb) {
//  setTimeout(cb, duration);
// }

// function sleepPromises(duration) {
//  var deferred = Q.defer();
//  setTimeout(deferred.resolve, duration);
//  return deferred.promise;
// }


// suspend(function* (resume) {
//     yield setTimeout(resume, 1000);
//     console.log('foo');
//     yield setTimeout(resume, 1000);
//     console.log('bar');
// })();

// suspend(function* (resume) {
//     while (true) {
//         try {
//             console.log('success', yield request('http://www.unexistant.com', resume));
//         } catch (err) {
//             console.log('error', err);
//         }
//     }
// })();

// function* map(array, callback) {
//     for (var i = 0, len = array.length; i < len; i++) {
//         yield* callback(array[i]);
//     }
// }

var _ = require("underscore");

function myAsyncFunction(cb) {
    setTimeout(function() {
        cb(null, 'TEST');
    }, 500);
}

// suspend(function* (resume) {
//     var myArray = [1,2,3,4,5];
//     _.each(myArray, suspend(function*(element, index, list, resume) {
//        //A yield in here won't work, because this is a "regular" function passed as a parameter to _.each
//        var result = yield myAsyncFunction(resume);
//        console.log(result);
//     }));
// })();

var myArray = [1,2,3,4,5];
_.each(myArray, suspend(function*(element, index, list, resume) {
   //A yield in here won't work, because this is a "regular" function passed as a parameter to _.each
   var result = yield myAsyncFunction(resume);
   console.log(result);
}));



