{
  "name": "lab",
  "description": "Test utility",
  "version": "0.0.8",
  "author": {
    "name": "Eran Hammer",
    "email": "eran@hueniverse.com",
    "url": "http://hueniverse.com"
  },
  "contributors": [],
  "repository": {
    "type": "git",
    "url": "git://github.com/spumko/lab"
  },
  "main": "index",
  "keywords": [
    "test"
  ],
  "engines": {
    "node": "0.8.x"
  },
  "dependencies": {
    "optimist": "0.3.x",
    "blanket": ">=1.0.9",
    "chai": "1.x.x",
    "jade": "0.28.x",
    "async": "0.2.x",
    "diff": "1.0.x"
  },
  "devDependencies": {},
  "bin": {
    "lab": "./bin/lab"
  },
  "scripts": {},
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/spumko/lab/raw/master/LICENSE"
    }
  ],
  "readme": "<a href=\"https://github.com/spumko\"><img src=\"https://raw.github.com/spumko/spumko/master/images/from.png\" align=\"right\" /></a>\n![lab Logo](https://raw.github.com/spumko/lab/master/images/lab.png)\n\nNode test utility\n\n[![Build Status](https://secure.travis-ci.org/spumko/lab.png)](http://travis-ci.org/spumko/lab)\n\n\n## Introduction\n\n**lab** is a simple test utility for node. Unlike other test frameworks, **lab** does not attempt to cover many use cases or provide\nrich functionality and extensibility. In fact, this project started as a fork off [mocha](http://visionmedia.github.com/mocha/) and was\nrepeatedly refactored until only the very basic functionality was left which was then rewritten into a handful of functions.\n\n**lab**'s primary goal is to support the narrow use cases of the [**spumko**](https://github.com/spumko) modules. If you give it a try\nand find a missing feature, you are better off giving [mocha](http://visionmedia.github.com/mocha/) a try. We are unlikely to add\nfunctionality to it. It is not meant to be a framework, just a handy utility.\n\n## Acknowledgements\n\n**lab** borrows heavily from [mocha](http://visionmedia.github.com/mocha/), including the actual code used to render the coverage report\ninto HTML. [mocha](http://visionmedia.github.com/mocha/) is a comprehensive test framework created by TJ Holowaychuk and published under the\n[MIT license](https://github.com/visionmedia/mocha/blob/master/LICENSE).\n\n## Usage\n\nTo install **lab**:\n\n```bash\n$ npm install lab\n```\n\nTo start:\n```bash\n$ lab\n```\n\nBy default, **lab** loads all the '*.js' files inside the local 'test' directory and executes the tests found. To start **lab** using\ndifferent directories or files, pass those as arguments:\n```bash\n$ lab unit.js\n```\n\nTest files must require the **lab** module, and add tests using the 'test()' method:\n```javascript\nvar Lab = require('lab');\n\nLab.test('returns true when 1 + 1 equals 2', function (done) {\n\n    Lab.expect(1+1).to.equal(2);\n    done();\n});\n```\n\nWhen a test is completed, 'done()' must be called, otherwise the test will time out (2 seconds by default) and will fail.\nThe test passes if 'done()' is call once before the timeout, and no exception thrown.\n\n**lab** works with any test utility that throws an error when a condition isn't met. It uses the same error interface as\n[mocha](http://visionmedia.github.com/mocha/) and already includes [chai](http://chaijs.com/)'s 'expect()' in its exported\ninterface as shown above.\n\nTests can be organized into experiments:\n```javascript\nvar Lab = require('lab');\n\nLab.experiment('math', function () {\n    \n    Lab.test('returns true when 1 + 1 equals 2', function (done) {\n\n        Lab.expect(1+1).to.equal(2);\n        done();\n    });\n});\n```\n\nIf you need to perform some asynch actions before or after executing the tests inside an experiment, the 'before()' and\n'after()' methods can be used:\n```javascript\nvar Lab = require('lab');\n\nLab.experiment('math', function () {\n\n    Lab.before(function (done) {\n        \n        // Wait 1 second\n        setTimeout(function () { done(); }, 1000);\n    });    \n\n    Lab.test('returns true when 1 + 1 equals 2', function (done) {\n\n        Lab.expect(1+1).to.equal(2);\n        done();\n    });\n});\n```\n\nTo make **lab** look like BDD:\n```javascript\nvar Lab = require('lab');\n\nvar describe = Lab.experiment;\nvar it = Lab.test;\nvar expect = Lab.expect;\nvar before = Lab.before;\nvar after = Lab.after;\n\ndescribe('math', function () {\n    \n    it('returns true when 1 + 1 equals 2', function (done) {\n\n        expect(1+1).to.equal(2);\n        done();\n    });\n});\n```\n\nTo make **lab** look like TDD:\n```javascript\nvar Lab = require('lab');\n\nvar suite = Lab.experiment;\nvar test = Lab.test;\nvar expect = Lab.expect;\nvar setup = Lab.before;\nver suite = Lab.after;\n\nsuite('math', function () {\n    \n    test('returns true when 1 + 1 equals 2', function (done) {\n\n        expect(1+1).to.equal(2);\n        done();\n    });\n});\n```\n\n## Command Line\n\n**lab** supports the following command line options:\n- `-r` - the reporter used to generate the test results. Defaults to `console`. Options are:\n    - `console` - simple text output to console\n    - `coverage` - JSON code coverage report\n    - `html` - HTML code coverage report\n    - `threshold` - Code coverage percentage check\n- `-m` - individual tests timeout in milliseconds, defaults to 2 seconds\n- `-o` - file to save the report to (`html` only), otherwise sent to stdout\n- `-t` - minimum code test coverage percentage (`threshold` only), defaults to 100%\n- `-e` - value to set the `NODE_ENV` environment variable to, defaults to 'test'\n\n## Motivation\n\n**lab** was developed to provide a minimal layer above writing simple node test cases. In contrast with other\ntest frameworks, **lab** does not modify any prototypes, globals, and uses node\n[domains](http://nodejs.org/api/domain.html) to capture test errors. We've used other test frameworks and utilities\nbut at some point needed greater control over the tools, especially around domains and error handling in node.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/spumko/lab/issues"
  },
  "homepage": "https://github.com/spumko/lab",
  "_id": "lab@0.0.8",
  "_from": "lab@0.0.x"
}
